package views

import (
	"breeze/internal/layouts"
	"breeze/internal/partials"
	"strconv"
)

func getHeaders() []string {
	return []string{"Name", "Status", "URL", "Last Checked", "Uptime", "Interval", "Actions"}
}

type Page struct {
	ID          string
	Name        string
	Status      string
	URL         string
	LastChecked string
	Uptime      string
	Interval    int32
}

func getIntervalStr(interval int32) string {
	if interval == 1 {
		return "Every hour"
	}

	if interval == 24 {
		return "Every day"
	}

	v := strconv.Itoa(int(interval))
	return "Every " + v + " hours"
}

func fmtStatus(status string) string {
	switch status {
	case "CHECKING":
		return "Checking"
	case "ONLINE":
		return "Online"
	case "OFFLINE":
		return "Offline"
	default:
		return "Not checked"
	}
}

func getPageHref(id string) string {
	return "/pages/" + id
}

templ Home(name string, isAuth bool, csrfToken string, pages []Page) {
	@layouts.Base("Home", isAuth, csrfToken) {
		<div hx-get="/" hx-trigger="every 30s" hx-swap="innerHTML" hx-target="body">
			<h2 class="mt-4 scroll-m-20 text-3xl font-medium tracking-tight flex items-center gap-4">
				if isAuth {
					<div>Status</div>
					<div class="htmx-indicator text-lime-500 rounded-full">
						@partials.RefreshCcwIcon()
					</div>
				} else {
					Login to see status
				}
			</h2>
			if isAuth {
				<div class="relative w-full overflow-auto">
					<table
						class="w-full caption-bottom text-sm"
					>
						<caption class="mt-4 text-sm text-neutral-500">A list of services and monitoring status.</caption>
						<thead class="[&_tr]:border-b">
							<tr class="border-b transition-colors hover:bg-neutral-200/50 data-[state=selected]:bg-muted">
								for _, header := range getHeaders() {
									<th class="h-12 px-4 text-left align-middle font-medium text-neutral-500 [&:has([role=checkbox])]:pr-0">{ header }</th>
								}
							</tr>
						</thead>
						<tbody
							class="[&_tr:last-child]:border-0"
						>
							for _, page := range pages {
								<tr class="border-b transition-colors hover:bg-neutral-200/50 data-[state=selected]:bg-muted">
									<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0">{ page.Name }</td>
									<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0">{ fmtStatus(page.Status) }</td>
									<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0">{ page.URL }</td>
									<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0">{ page.LastChecked }</td>
									<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0">{ page.Uptime }</td>
									<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0">{ getIntervalStr(page.Interval) }</td>
									<td class="p-4 align-middle [&:has([role=checkbox])]:pr-0">
										<div class="flex items-center gap-2">
											<a href={ templ.SafeURL(getPageHref(page.ID)) } hx-swap="transition:true">Edit</a>
										</div>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
		</div>
	}
}
