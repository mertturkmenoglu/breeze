// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPage = `-- name: CreatePage :one
INSERT INTO pages (
  id,
  name,
  url,
  created_at,
  status,
  uptime,
  interval,
  last_checked
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8
) RETURNING id, name, url, created_at, status, uptime, interval, last_checked
`

type CreatePageParams struct {
	ID          string
	Name        string
	Url         string
	CreatedAt   pgtype.Timestamptz
	Status      Pagestatus
	Uptime      int32
	Interval    int32
	LastChecked pgtype.Timestamptz
}

func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) (Page, error) {
	row := q.db.QueryRow(ctx, createPage,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.CreatedAt,
		arg.Status,
		arg.Uptime,
		arg.Interval,
		arg.LastChecked,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.Status,
		&i.Uptime,
		&i.Interval,
		&i.LastChecked,
	)
	return i, err
}

const getPageById = `-- name: GetPageById :one
SELECT id, name, url, created_at, status, uptime, interval, last_checked FROM pages
WHERE pages.id = $1 LIMIT 1
`

func (q *Queries) GetPageById(ctx context.Context, id string) (Page, error) {
	row := q.db.QueryRow(ctx, getPageById, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.Status,
		&i.Uptime,
		&i.Interval,
		&i.LastChecked,
	)
	return i, err
}

const getPages = `-- name: GetPages :many
SELECT id, name, url, created_at, status, uptime, interval, last_checked FROM pages
ORDER BY pages.created_at DESC
OFFSET $1
LIMIT $2
`

type GetPagesParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetPages(ctx context.Context, arg GetPagesParams) ([]Page, error) {
	rows, err := q.db.Query(ctx, getPages, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.Status,
			&i.Uptime,
			&i.Interval,
			&i.LastChecked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPagesThatNeedChecking = `-- name: GetPagesThatNeedChecking :many
SELECT id, name, url, created_at, status, uptime, interval, last_checked FROM pages
WHERE pages.status = 'NOT_CHECKED' OR pages.last_checked < NOW() - INTERVAL '1 hour'
`

func (q *Queries) GetPagesThatNeedChecking(ctx context.Context) ([]Page, error) {
	rows, err := q.db.Query(ctx, getPagesThatNeedChecking)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.Status,
			&i.Uptime,
			&i.Interval,
			&i.LastChecked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePageStatus = `-- name: UpdatePageStatus :exec
UPDATE pages
SET status = $1, last_checked = NOW()
WHERE id = $2
`

type UpdatePageStatusParams struct {
	Status Pagestatus
	ID     string
}

func (q *Queries) UpdatePageStatus(ctx context.Context, arg UpdatePageStatusParams) error {
	_, err := q.db.Exec(ctx, updatePageStatus, arg.Status, arg.ID)
	return err
}
